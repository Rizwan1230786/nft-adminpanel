<?php

namespace App\Http\Controllers\Api\Seller\Guest;

use App\Http\Controllers\Controller;
use App\Http\Requests\Seller\SellerGuest;
use App\Http\Requests\Seller\SellerRegistration;
use App\Models\Seller;
use App\Http\Traits\Helpers;
use App\Http\Traits\PaymentStripe;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
/**
 * @group Seller Guest app
 *
 * APIs endpoints for managing seller
 */
class GuestController extends Controller
{
    use Helpers;
    use PaymentStripe;
    /**
     * Register the Seller
     *
     * This endpoint allows you to register client and generate token for authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam email email required The valid email of the seller, its not required if google id or apple id  is given. Example: seller@gmail.com
     * @bodyParam google_id string The Google ID of seller, Its required if email or apple id is not given. Example: 12345678
     * @bodyParam apple_id string The Apple ID of seller, Its required if email or google id is not given. Example: 12345678
     * @bodyParam password string The Password of seller, Its required if email is given. Example: admin@123
     * @bodyParam account_type string The Password of seller. Example: seller
     * @bodyParam image string The Image Url of seller.
     *
     * @response {
     *   "status": true/false,
     *   "message": string,
     *   "data": {
     *       "email": string/null,
     *       "google_id": string/null,
     *       "apple_id": string/null,
     *       "status": 0/1
     *   },
     *   "access_token": string,
     *   "token_type": "Bearer"
     *   }
     *
     */
    public function register(SellerRegistration $request)
    {
        dd('ok');
        $token = "";
        $statusCode = 401;
        $message = "Fill the data in proper way";
        $data = $request->validated();
        $data["is_verified"] = 0;
        $whereConditon = $orWhereCondition = array();
        if (isset($data["google_id"]) && !empty($data["google_id"])) {
            $data["is_verified"] = 1;
            $whereConditon["google_id"] = $data["google_id"];
        } else {
            $data["google_id"] = null;
        }
        if (isset($data["apple_id"]) && !empty($data["apple_id"])) {
            $data["is_verified"] = 1;
            if (empty($whereConditon))
                $whereConditon["apple_id"] = $data["apple_id"];
            else
                $orWhereCondition["apple_id"] = $data["apple_id"];
        } else {
            $data["apple_id"] = null;
        }
        if (isset($data["email"]) && !empty($data["email"])) {
            if (empty($whereConditon))
                $whereConditon["email"] = $data["email"];
            else
                $orWhereCondition["email"] = $data["email"];
        } else {
            $data["email"] = null;
        }
        $previousRecord = Seller::select(['id', 'fullname', 'displayname', 'email', 'image', 'account_type', 'google_id', 'apple_id', 'status'])->where($whereConditon);
        if (!empty($orWhereCondition))
            $previousRecord = $previousRecord->orWhere($orWhereCondition);
        $previousRecord = $previousRecord->first();
        if (isset($previousRecord->id) && !empty($previousRecord->id)) {
            $statusCode = 403;
            $message = "You are already registered please login.";
            $data = null;
        } else {
            $statusCode = 200;
            $data = array_merge(
                $data,
                array("name" => ($data["name"] ?? null)),
                array("email" => ($data["email"] ?? null)),
                array("account_type" => ($data["account_type"] ?? null)),
                array("google_id" => ($data["google_id"] ?? null)),
                array("apple_id" => ($data["apple_id"] ?? null)),
                array("image" => ($data["image"] ?? null))
            );
            $data['password'] = (isset($data["password"]) && !empty($data["password"]) ? Hash::make($data["password"]) : null);
            $sellerId = Str::random(30);
            for ($i = 1; $i <= 70; $i++) {
                $sellerUnique = Seller::where("seller_id", Str::random(30))->select('id')->first();
                if (!isset($sellerUnique->id) || empty($sellerUnique->id)) {
                    break;
                } else {
                    $sellerId = Str::random(30);
                }
            }
            $data["seller_id"] = $sellerId;
            $data["secret_key"] = Str::random(30);
            $data = Seller::create($data);
            Auth::guard('sellerService')->login($data);
            $user = Auth::guard('sellerService')->user();
            $data = Seller::where("id", $data->id)->select('id', 'fullname', 'displayname', 'email', 'google_id', 'apple_id', 'status', "seller_id", "secret_key", "stripe_link", "stripe_status")->first();
            $stripeAccount = $this->getOrCreateAccount((isset($data->email) && !empty($data->email) ? array("email" => $data->email) : array()), array());
            $accountId = $accountLink =  null;
            if (isset($stripeAccount["api_status"]) && !empty($stripeAccount["api_status"])) {
                if ($stripeAccount["api_status"] == true) {
                    if (isset($stripeAccount["data"]["account_id"]) && !empty($stripeAccount["data"]["account_id"])) {
                        $accountId = $stripeAccount["data"]["account_id"];
                        $linkDetail = $this->createAccountLink($stripeAccount["data"]["account_id"], [
                            "return_url" => config('constants.stripe_return_url'),
                            "refresh_url" => config('constants.stripe_return_url')
                        ]);
                        $accountLink = (isset($linkDetail["api_status"]) && !empty($linkDetail["api_status"]) ? ($linkDetail["api_status"] == true ? (isset($linkDetail["data"]["account_link"]["url"]) && !empty($linkDetail["data"]["account_link"]["url"]) ? $linkDetail["data"]["account_link"]["url"] : $accountLink) : $accountLink) : $accountLink);
                    }
                }
            }
            Seller::where("id", $data->id)->update(array("stripe_account_id" => $accountId, "stripe_link" => $accountLink));
            unset($data->id);
            $data->accountLink = $accountLink;
        }
        if (isset($data) && !empty($data) && $statusCode == 200) {
            $token = $user->createToken('auth_token')->accessToken;
        }
        return response(['status' => ($statusCode == 200 ? true : false), 'message' => ($statusCode == 200 ? "Register successfully" : $message), "data" => ($data ?? array()), 'access_token' => $token, 'token_type' => 'Bearer'], $statusCode);
    }
    /**
     * Login the Seller
     *
     * This endpoint allows you to register client and generate token for authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam email email required The valid email of the seller, its not required if google id or apple id  is given. Example: seller@gmail.com
     * @bodyParam google_id string The Google ID of seller, Its required if email or apple id is not given. Example: 12345678
     * @bodyParam apple_id string The Apple ID of seller, Its required if email or google id is not given. Example: 12345678
     * @bodyParam password string The Password of seller, Its required if email is given. Example: admin@123
     *
     * @response {
     *   "status": true/false,
     *   "message": string/null,
     *   "data": {
     *       "id": string/null,
     *       "fullname": string/null,
     *       "displayname": string/null,
     *       "email": string/null,
     *       "image": string/null,
     *       "account_type": string/null,
     *       "stripe_account_id": string/null,
     *       "stripe_status": true/false,
     *       "accountLink": string/null
     *   },
     *   "access_token": string/null,
     *   "token_type": "Bearer"
     *  }
     */
    public function login(SellerGuest $request)
    {
        $token = "";
        $statusCode = 401;
        $message = "Invalid information";
        $request = $request->all();
        $orWhereCondition = array();
        $orWhereCondition = (isset($request["apple_id"]) && !empty($request["apple_id"]) ? array("apple_id" => $request["apple_id"]) : $orWhereCondition);
        $orWhereCondition = (isset($request["google_id"]) && !empty($request["google_id"]) ? array_merge(array("google_id" => $request["google_id"]), $orWhereCondition) : $orWhereCondition);
        $orWhereCondition = (isset($request["email"]) && !empty($request["email"]) ? array_merge(array("email" => $request["email"]), $orWhereCondition) : $orWhereCondition);
        $data = Seller::select(['id', 'fullname', 'displayname', 'email', 'image', 'status', 'account_type', "stripe_account_id", "stripe_status", "password"])->orWhere($orWhereCondition)->first();
        if (isset($data->id) && !empty($data->id)) {
            $nextContinue = true;
            if (isset($request["email"]) && !empty($request["email"])) {
                $nextContinue = false;
                if (isset($request["password"]) && !empty($request["password"])) {
                    $nextContinue = Hash::check($request["password"], $data->password);
                    unset($data->password);
                }
            }
            if ($nextContinue == true) {
                if (isset($data->status) && !empty($data->status)) {
                    unset($data->status);
                    $statusCode = 200;
                    $message = "User login successfully.";
                    Auth::guard('sellerService')->login($data);
                    $data = Auth::guard('sellerService')->user();
                    if(isset($data->image) && !empty($data->image)){
                        $data->image = $this->imageDefaultPath(Config('constants.seller_profile_directory'), ($data->image ?? ""), Config('constants.seller_profile_directory'), $data->image);
                    }else{
                        $data->image = null;
                    }
                    $token = $data->createToken('auth_token')->accessToken;
                    $accountLink =  null;
                    $stripeStatus = (isset($data->stripe_status) && !empty($data->stripe_status) ? ($data->stripe_status == true ? true : false) : false);
                    $accountId = (isset($data["stripe_account_id"]) && !empty($data["stripe_account_id"]) ? $data["stripe_account_id"] : null);
                    if (!empty($accountId)) {
                        if ($stripeStatus == false) {
                            $statusCheck = $this->checkStripeConnectedAccountStatus($accountId);
                            $stripeStatus = (isset($statusCheck["status"]) && !empty($statusCheck["status"]) ? (isset($statusCheck["data"]["stripe_connect"]) && !empty($statusCheck["data"]["stripe_connect"]) ? ($statusCheck["data"]["stripe_connect"] == true ? true : $stripeStatus) : $stripeStatus) : $stripeStatus);
                            if ($stripeStatus == false) {
                                $linkDetail = $this->createAccountLink($accountId, [
                                    "return_url" => Config::get('constants.stripe_return_url'),
                                    "refresh_url" => Config::get('constants.stripe_return_url')
                                ]);
                                $accountLink = (isset($linkDetail["api_status"]) && !empty($linkDetail["api_status"]) ? ($linkDetail["api_status"] == true ? (isset($linkDetail["data"]["account_link"]["url"]) && !empty($linkDetail["data"]["account_link"]["url"]) ? $linkDetail["data"]["account_link"]["url"] : $accountLink) : $accountLink) : $accountLink);
                                Seller::where("id", $data->id)->update(array("stripe_account_id" => $accountId, "stripe_link" => $accountLink));
                            }
                        };
                    }
                    $data->accountLink = $accountLink;
                    $data->stripe_status = $stripeStatus;
                } else {
                    unset($data);
                    $message = "You are temporary blocked from administrative";
                }
            }
        }
        return response(['status' => ($statusCode == 200 ? true : false), 'message' => ($statusCode == 200 ? 'Login Successfully' : $message), "data" => ($data ?? array()), 'access_token' => $token, 'token_type' => 'Bearer'], $statusCode);
    }
}
